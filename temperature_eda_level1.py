# -*- coding: utf-8 -*-
"""Temperature_EDA_Level1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/184FbBSVi7KlAUFVkd2Lw2jQZIpcnFWzx

**Level 1 - UNDERSTANDING THE DATA**

Data Loading & Inspection
"""

import pandas as pd
import numpy as np

df = pd.read_excel('/content/Manteca2023.xlsx')

df.info() #to check column types and missing values

df.describe() #to check summary statistics

df.head() #to check first few rows

df.tail() #to check last few rows

"""Date Range & Completeness

"""

#using .min() and .max() to check the range of date
df['date'].min()

df['date'].max()

#counting unique dates
df['date'].nunique()

#checking duplicate dates
df['date'].duplicated().sum()

"""Daily Visualizations"""

#daily average temperature using matplotlib
import matplotlib.pyplot as plt

plt.plot(df['date'],df['avg_temp_f'])
plt.xlabel('Date')
plt.ylabel('Average Temperature')
plt.title('Daily Temperature')
plt.show()

#matplotlib daily humidity
plt.plot(df['date'],df['avg_humidity_pct'])
plt.xlabel('Date')
plt.ylabel('Average Humidity')
plt.title('Daily Humidity')
plt.show()

#plotting daily precipitation
plt.plot(df['date'],df['precip_in'])
plt.xlabel('Date')
plt.ylabel('Average Precipitation')
plt.title('Daily Precipitation')
plt.show()

"""Monthly Aggregates & Plots"""

#convert date colunm using datetime()
df['date'] = pd.to_datetime(df['date'])
df['date'].dt.month

#creating new colunms
df['month'] = df['date'].dt.month
df['month_name'] = df['date'].dt.strftime('%b')



#calculating monthly averages
import calendar
monthly_avg = df.groupby('month').agg({
    'avg_temp_f': 'mean',
    'avg_humidity_pct': 'mean',
    'avg_dew_point_f': 'mean',
    'avg_wind_mph': 'mean',
    'avg_pressure_in': 'mean'
}).reset_index()

#readability
monthly_avg['month_name'] = monthly_avg['month'].apply(lambda x: calendar.month_abbr[x])

#Reorder columns for clarity
monthly_avg = monthly_avg[['month', 'month_name', 'avg_temp_f', 'avg_humidity_pct',
                           'avg_dew_point_f', 'avg_wind_mph', 'avg_pressure_in']]

#Round values for readability
monthly_avg = monthly_avg.round(2)

# Sort by month
monthly_avg = monthly_avg.sort_values('month')

# Display
monthly_avg

df.head()

"""Observations & Insight"""

#Box plots for temperature spread per month using seaborn
import seaborn as sns
sns.boxplot(data=df, x='month_name', y='avg_temp_f')
plt.show()

#Box plots for humidity per month using seaborn
sns.boxplot(data=df, x='month_name', y='avg_humidity_pct')
plt.show()

#Box plots for dew point per month using seaborn
sns.boxplot(data=df, x='month_name', y='avg_dew_point_f')
plt.show()

#Box plots for precipitation per month using seaborn
sns.boxplot(data=df, x='month_name', y='precip_in')
plt.show()

#Box plots for wind speeds per month using seaborn
sns.boxplot(data=df, x='month_name', y='avg_wind_mph')
plt.show()

#Box plots for pressure per month using seaborn
sns.boxplot(data=df, x='month_name', y='avg_pressure_in')
plt.show()

"""**Data Quality - Missingness and outliers**"""

#find missing data
df.isnull().sum()

#missingno library : to visualize and
#understand missing data patterns within datasets,
#particularly those structured as Pandas DataFrames.
import missingno as msno
msno.matrix(df)